=head3	2012-01-05

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Preface

to

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Operating%20systems



=head3	2012-01-06

http://www.network-theory.co.uk/docs/gccintro/gccintro_82.html


Script started on Fri 06 Jan 2012 04:17:03 PM GMT
smcgeeve@ubuntu:~/proj/code$ pwd
/home/smcgeeve/proj/code
smcgeeve@ubuntu:~/proj/code$ ls -l
total 40
-rw-r--r-- 1 smcgeeve users  111 2012-01-06 16:04 hello.c
-rw-r--r-- 1 smcgeeve users  244 2012-01-06 15:37 log.txt
-rwxr-xr-x 1 smcgeeve users 7235 2012-01-05 16:13 poem
-rw-r--r-- 1 smcgeeve users  660 2012-01-05 16:13 poem.c
-rwxr-xr-x 1 smcgeeve users 7167 2012-01-05 16:20 printstring
-rw-r--r-- 1 smcgeeve users  202 2012-01-05 16:20 printstring.c


# PREPROCESS C source / headers / macros
smcgeeve@ubuntu:~/proj/code$ cpp    hello.c	-o hello.i


# COMPILE preprocessed source to assembler
smcgeeve@ubuntu:~/proj/code$ gcc -S hello.i	-o hello.s


# ASSEMBLE to produce unlinked object file
smcgeeve@ubuntu:~/proj/code$ as     hello.s	-o hello.o


# LINK object file(s) to produce native executable
smcgeeve@ubuntu:~/proj/code$ gcc    hello.o	-o hello


smcgeeve@ubuntu:~/proj/code$ ls -lrt
total 76
-rwxr-xr-x 1 smcgeeve users  7159 2012-01-05 14:54 hello
-rw-r--r-- 1 smcgeeve users   660 2012-01-05 16:13 poem.c
-rwxr-xr-x 1 smcgeeve users  7235 2012-01-05 16:13 poem
-rw-r--r-- 1 smcgeeve users   202 2012-01-05 16:20 printstring.c
-rwxr-xr-x 1 smcgeeve users  7167 2012-01-05 16:20 printstring
-rw-r--r-- 1 smcgeeve users   244 2012-01-06 15:37 log.txt
-rw-r--r-- 1 smcgeeve users   111 2012-01-06 16:04 hello.c
-rw-r--r-- 1 smcgeeve users 17599 2012-01-06 16:17 hello.i
-rw-r--r-- 1 smcgeeve users   491 2012-01-06 16:17 hello.s
-rw-r--r-- 1 smcgeeve users  1028 2012-01-06 16:17 hello.o
-rwxr-xr-x 1 smcgeeve users  7159 2012-01-06 16:17 hello

smcgeeve@ubuntu:~/proj/code$ file hello*; file a.out
hello:   ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped
hello.c: ASCII C program text
hello.i: ASCII C program text
hello.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), not stripped
hello.s: ASCII assembler program text
hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped
smcgeeve@ubuntu:~/proj/code$ exit
exit



http://www.network-theory.co.uk/docs/gccintro/gccintro_82.html

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Libraries



smcgeeve@ubuntu:~/proj/code$ cat count.c
/* 2012-01-05:	~/proj/code/count.c	*/

#include <stdio.h>
#include <math.h>

main() {

	double x, y;

	printf( "Hello World!\n" );
	y = sin (x);
	printf( "Maths library ready!\n" );
	
	return 0;

}
smcgeeve@ubuntu:~/proj/code$ gcc count.c -o count -lm	# NOTE -lm AT END!!!
smcgeeve@ubuntu:~/proj/code$ ./count
Hello World!
Maths library ready!


# http://c-faq.com/fp/libm.html



smcgeeve@ubuntu:~/proj/code$ cat dummy.c
/* 2012-01-05:	~/proj/code/dummy.c	*/

#include <stdio.h>

dummy() {

}

main() {

	printf( "Calling dummy() !\n" );
	dummy();
	printf( "Called dummy() !\n" );

	return 0;

}
smcgeeve@ubuntu:~/proj/code$ gcc dummy.c -o dummy
smcgeeve@ubuntu:~/proj/code$ ./dummy
Calling dummy() !
Called dummy() !



=head3	2012-01-07


smcgeeve@ubuntu:~/proj/code$ cpp -M hello.c -o hello.m
smcgeeve@ubuntu:~/proj/code$ cat hello.m
hello.o: hello.c /usr/include/stdio.h /usr/include/features.h \
 /usr/include/i386-linux-gnu/bits/predefs.h \
 /usr/include/i386-linux-gnu/sys/cdefs.h \
 /usr/include/i386-linux-gnu/bits/wordsize.h \
 /usr/include/i386-linux-gnu/gnu/stubs.h \
 /usr/include/i386-linux-gnu/gnu/stubs-32.h \
 /usr/lib/gcc/i686-linux-gnu/4.6.1/include/stddef.h \
 /usr/include/i386-linux-gnu/bits/types.h 
 /usr/include/i386-linux-gnu/bits/typesizes.h /usr/include/libio.h \
 /usr/include/_G_config.h /usr/include/wchar.h 
 /usr/lib/gcc/i686-linux-gnu/4.6.1/include/stdarg.h \
 /usr/include/i386-linux-gnu/bits/stdio_lim.h \
 /usr/include/i386-linux-gnu/bits/sys_errlist.h


=head4	http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Programming%20style


smcgeeve@ubuntu:~/proj/code$ cat skeleton.c
/*	2012-01-07:	~/proj/code/skeleton.c	*/

#include <stdio.h>
#include "myfile.c"	/*	generic local source	*/

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


main () {

	int	a, b;	/*	declare local vars	*/
	int	simple;	/*	name a local variable	*/

	printf( "\n" );

	a = random();
	printf( "\tToday's randum number is %d \n", a);

	b = function1();	/*	assign return val to local var */
	printf( "\tCalled function1 \n" );

	simple = function2(a,1);	/*	just call and return */
	printf( "\tAdding 1 to our random number gives %d \n", simple );

	printf( "\n" );

}


int function1 () {

	/* do nothing */

}

int function2 (a, b) {

	int	c;		/*	get sum of inputs	*/

	c = a + b;		/*	do something simple	*/

	return c;		/*	would really return somthing */

}
smcgeeve@ubuntu:~/proj/code$ gcc skeleton.c -o skeleton
smcgeeve@ubuntu:~/proj/code$ ./skeleton

	Today's randum number is 1804289383 
	Called function1 
	Adding 1 to our random number gives 1804289384 


=head4	http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Comments

Failing to terminate comments produces (sometimes misleading) errors:

smcgeeve@ubuntu:~/proj/code$ head skeleton.c
/*	2012-01-07:	~/proj/code/skeleton.c	*/

/* system headers / libraries */
#include <stdio.h>

/* local headers / libraries
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123

# cpp doesn't detect unterminated comment above
smcgeeve@ubuntu:~/proj/code$ cpp skeleton.c -o skeleton.i

# but gcc does - without any precise report of the faulty comment's location
smcgeeve@ubuntu:~/proj/code$ gcc -S skeleton.i -o skeleton.s
skeleton.c:19:10: error: expected declaration specifiers or ‘...’ before string constant
skeleton.c:21:2: warning: data definition has no type or storage class [enabled by default]
skeleton.c:21:2: error: initializer element is not constant
skeleton.c:22:10: error: expected declaration specifiers or ‘...’ before string constant
skeleton.c:22:46: error: expected declaration specifiers or ‘...’ before ‘a’
skeleton.c:25:2: warning: data definition has no type or storage class [enabled by default]
skeleton.c:25:2: error: initializer element is not constant
skeleton.c:26:10: error: expected declaration specifiers or ‘...’ before string constant
skeleton.c:29:2: warning: data definition has no type or storage class [enabled by default]
skeleton.c:29:2: error: initializer element is not constant
skeleton.c:30:10: error: expected declaration specifiers or ‘...’ before string constant
skeleton.c:30:57: error: expected declaration specifiers or ‘...’ before ‘simple’
skeleton.c:32:10: error: expected declaration specifiers or ‘...’ before string constant
skeleton.c:34:1: error: expected identifier or ‘(’ before ‘}’ token




=head3	2012-01-10

github.org:/baldygit == ~/proj/baldygit

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Functions


bash-3.2$ cat addtwoint.c
/*	2012-01-10:	~/proj/code/addtwoint.c	*/

/* system headers / libraries */
#include <stdio.h>

/* local headers / libraries */
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


main () {

	/* define global vars */
	int	a = 1, b = 2, result = 0;

	printf( "\n" );

	printf( "\tBefore calling function, result is %d\n", result );

	/* call function with global arguments, 
	   assign local return value to caller's global variable */
	result = addtwoint( a, b); 

	printf( "\tAfter calling function, the result of %d plus %d is %d\n", a, b, result);

	printf( "\n" );

}


int addtwoint (int a, int b) {

	/* local sum of inputs */
	int	c;

	c = a + b;

	return c;

}
bash-3.2$ gcc addtwoint.c -o addtwoint; ./addtwoint

	Before calling function, result is 0
	After calling function, the result of 1 plus 2 is 3




bash-3.2$ cat level.c
/*	2012-01-10:	~/proj/baldygit/level.c	*/

/* system headers / libraries */
#include <stdio.h>

/* local headers / libraries */
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123

/* *** level 0 *** */

main () {

	/* define global vars */
	int	a = 1, b = 2, result = 0;

	printf( "\n" );

	printf( "\tThis is level 0: the main program\n");
	printf( "\tAbout to go down to level 1 \n");

	DownOne();

	printf( "\tReturned from level 1 to level 0, and exiting!\n" );

	printf( "\n" );

}


int DownOne () {

	/* local vars */

	printf( "\n" );
	printf( "\tEntered level 1 \n" );

	printf( "\tIn level 1, calling level 2, branch left \n");
	DownLeft( 2 );
	printf( "\tIn level 1, Calling level 2, branch right \n" );
	DownRight( 2 ); 

	printf( "\tIn level 1, returning back up to level 0 \n");

}


DownLeft (int a) {

	/* local vars */

	printf( "\n" );
	printf( "\tEntered level %d, branch left\n", a);
	printf( "\tReturning to the calling function ... \n");
	printf( "\n" );

}


DownRight (int b) {

	/* local vars */

	printf( "\n" );
	printf( "\tEntered level %d, branch right\n", b);
	printf( "\tReturning to the calling function ... \n" );
	printf( "\n" );

}
bash-3.2$ gcc level.c -o level
bash-3.2$ ./level

	This is level 0: the main program
	About to go down to level 1 

	Entered level 1 
	In level 1, calling level 2, branch left 

	Entered level 2, branch left
	Returning to the calling function ... 

	In level 1, Calling level 2, branch right 

	Entered level 2, branch right
	Returning to the calling function ... 

	In level 1, returning back up to level 0 
	Returned from level 1 to level 0, and exiting!



=head3	2012-01-12

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#FunctionsWithValues


bash-3.2$ cat rechnung.c
/*	2012-01-10:	~/proj/code/rechnung.c	*/

/* system headers, libraries */
#include <stdio.h>

/* local headers, libraries */
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


main () {

	/* define global vars */
	int	starter = 1, main = 2, dessert = 3, total = 0;

	printf( "\n" );

	total = rechnung( starter, main, dessert ); 

	printf( "\n" );

}


int rechnung (int starter, int main, int dessert) {

	/* local sum of inputs */
	int	bill = 0;

	printf( "\tStarter is %d\n", starter );
	printf( "\tMain is %d\n", main );
	printf( "\tDessert is %d\n", dessert );

	bill = starter + main + dessert;
	printf( "\tBill is %d\n", bill );

	return bill;

}
bash-3.2$ gcc rechnung.c -o rechnung; ./rechnung

	Starter is 1
	Main is 2
	Dessert is 3
	Bill is 6



bash-3.2$ cat product.c
/*	2012-01-12:	~/proj/code/product.c	*/

/* system headers, libraries */
#include <stdio.h>

/* local headers, libraries */
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


main () {

	/* define global vars */
	int	sean = 47, ruthanne = 55, total = 0;

	printf( "\n" );

	total = product( sean, ruthanne ); 
	printf( "\tThe product of ages is %d\n", total );

	printf( "\n" );

}


int product (int sean, int ruthanne ) {

	/* local product of inputs */
	int	combined = 0;

	printf( "\tSean is %d\n", sean );
	printf( "\tRuth Anne is %d\n", ruthanne );

	combined = sean * ruthanne; 

	return combined;

}
bash-3.2$ gcc product.c -o product; ./product

	Sean is 47
	Ruth Anne is 55
	The product of ages is 2585



http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Breaking%20out%20early

# The statement 'return' can be used to terminate execution 
# at any arbitrary point in a function, including main.  
# It can also be used to return a value or status either to 
# the callling function or to the environment, if called within main().


http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#The%20exit%20function

bash-3.2$ cat earlyexit.c
/*	2012-01-12:	~/proj/code/early.c	*/

/* system headers, libraries */
#include <stdio.h>
/* FAQ: include to resolve errors about exit() */
#include <stdlib.h>

/* local headers, libraries */
#include "myfile.c"

#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123

/* local function prototypes: return-type function-name (param-type param-name, ...) */
int early ( int name1, int name2 );


main ( int argc, char *argv[] ) {

	/* define global vars */
	int status = 0;
	int	sean = 47, ruthanne = 55, total = 0;

	printf( "\n" );

	printf( "\tThe ages of Sean and Ruth Anne, before calling the early function, are %d and %d\n", sean, ruthanne );
	total = early( sean, ruthanne ); 
	printf( "\tThe early of the ages of Sean, %d and Ruth Anne, %d is %d\n", sean, ruthanne, total );

	printf( "\n" );

	/* K&R p.26 recommends returning status to environment */
	return status;

}


int early (int sean, int ruthanne ) {

	/* local early of inputs */
	int	combined = 0;

	printf( "\tSean is %d\n", sean );
	printf( "\tRuth Anne is %d\n", ruthanne );

	printf( "\tTerminate execution & clean up early: combined is %d\n", combined );
	exit (0); 

	combined = sean * ruthanne; 

	return combined;

}

bash-3.2$ gcc earlyexit.c -o earlyexit; ./earlyexit

	The ages of Sean and Ruth Anne, before calling the early function, are 47 and 55
	Sean is 47
	Ruth Anne is 55
	Terminate execution & clean up early: combined is 0




http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Functions%20and%20types


http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Variables


http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Types



=head3	2012-01-13

http://www.iu.hio.no/~mark/CTutorial/CTutorial.html#Types

bash-3.2$ cat types.c; gcc types.c -o types; ./types

/*	2012-01-13:	~/proj/code/types.c	*/

/* system headers, libraries */
#include <stdio.h>
#include <stdlib.h>


/* local headers, libraries */
#include "myfile.c"


/* local macros */
#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


/* local function prototypes: return-type function-name (param-type param-name, ...) */
int	types ( int name1, int name2 );


/* global variables */
int 	elapsed = 0;
float	pie = 3.142;


main ( int argc, char *argv[] ) {

	/* define global vars */
	int	status = 0;
	int	sean = 47, ruthanne = 55, total = 0;

	/* single ascii characters use single quotes */
	char	alpha = 'a';
	char	beta = 'b';

	printf( "\n" );

	printf( "\tSingle ASCII characters alpha - %c, and beta - %c\n", alpha, beta );

	printf( "\n" );

	/* K&R p.26 recommends returning status to environment */
	return status;

}

bash-3.2$ gcc types.c -o types; ./types

	Single ASCII characters alpha - a, and beta - b
	The ages of Sean and Ruth Anne, before calling the types function, are 47 and 55
	Sean is 47
	Ruth Anne is 55
	Terminate execution & clean up types: combined is 0



bash-3.2$ cat specials.c; gcc specials.c -o specials; ./specials

/*	2012-01-13:	~/proj/code/specials.c	*/


/* system headers, libraries */
#include <stdio.h>
#include <stdlib.h>


/* local headers, libraries */
#include "myfile.c"


/* local macros */
#define	SCREAM		"arghhhhh"
#define	NUMBER_OF_BONES	123


/* local function prototype: return-type function-name (param-type param-name, ...) */
int	specials ( int name1, int name2 );


/* global variables */
int 	elapsed = 0;
float	pie = 3.142;


main ( int argc, char *argv[] ) {

	/* define global vars */
	int status = 0;

	/* single ascii characters use single quotes */
	char	alpha = 'a';
	char	beta = 'b';

	printf( "\n" );
	printf( "\tSingle ASCII characters alpha - %c, and beta - %c\n", alpha, beta );

	printf( "\n" );
	printf( "\tBeep! \7 \n" );
	printf( "\tch = \'a\' \n" );
	printf( "\t<- Start of this line - carriage return without line feed  \r" );

	/* K&R p.26 recommends returning status to environment */
	return status;

}


bash-3.2$ gcc specials.c -o specials; ./specials

	Single ASCII characters alpha - a, and beta - b

	Beep!  
	ch = 'a' 
	bash-3.2$ <- Start of this line - carriage return without line feed 



